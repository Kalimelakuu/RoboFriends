{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","React","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filtering","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.8fee9ba4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name , email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n             <img alt ='robots' src={`https://robohash.org/${id}?200x200`} />\r\n             <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // if (true){\r\n    //   throw new Error('Nooooooo');\r\n    // }\r\n    return (\r\n        <div>\r\n          {\r\n          robots.map((user,i) =>{\r\n            return <Card \r\n                    key ={i} \r\n                    id={robots[i].id} \r\n                    name ={robots[i].name} \r\n                    email ={robots[i].email}/>\r\n        })}\r\n       </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox =({searchfield, searchchange}) => {\r\n    return (\r\n        <div>\r\n             <input \r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' placeholder ='serach robots'\r\n             onChange={searchchange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React  from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY :'scroll', border:'1px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError : true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops . This is Error</h1>\r\n        }\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots : [],\r\n            searchfield:''\r\n        }\r\n       \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => \r\n            response.json()\r\n        ).then(users =>{\r\n            this.setState({robots: users});\r\n        })\r\n        \r\n        \r\n    }\r\n    \r\n    onSearchChange = (event) =>{  \r\n        this.setState({searchfield:event.target.value});      \r\n       \r\n    }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const filtering = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n            <h1>Loading</h1>:\r\n        \r\n             (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robo Friends </h1>\r\n                    <SearchBox searchchange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                       <ErrorBoundary>\r\n                          <CardList robots ={filtering}/>\r\n                       </ErrorBoundary>\r\n                        \r\n                      \r\n                    </Scroll>\r\n                   \r\n                </div>\r\n            )\r\n        \r\n        \r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from '../src/containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}